apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ include "s3-files-backup.fullname" . }}
  labels:
    {{- include "s3-files-backup.labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  schedule:  {{ .Values.schedule }}
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            vault.hashicorp.com/agent-inject: "true"
            vault.hashicorp.com/agent-inject-secret-s3_keys: "{{ .Values.backupConfigs.VAULT_SECRET_PATH }}"
            vault.hashicorp.com/role: "{{ .Values.backupConfigs.VAULT_K8_ROLE }}"
            vault.hashicorp.com/agent-inject-template-s3_keys: |
              {{`{{- with secret "kv/argo/lab/s3_keys" -}}
              [s3]
              aws_access_key_id = {{ .Data.aws_access_key_id }}
              aws_secret_access_key = {{ .Data.aws_secret_access_key }}
              {{- end }}`}}
        spec:
          containers:
            - name: backup
              image: {{ .Values.image.name }}
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              env:
                - name: S3_BUCKET_NAME
                  value: "{{ .Values.backupConfigs.S3_BUCKET_NAME }}"
                - name: S3_ENDPOINT_URL
                  value: "{{ .Values.backupConfigs.S3_ENDPOINT_URL }}"
                - name: BACKUP_ID
                  value: "{{ .Values.backupConfigs.BACKUP_ID }}"
                - name: AWS_SHARED_CREDENTIALS_FILE
                  value: "{{ .Values.backupConfigs.AWS_SHARED_CREDENTIALS_FILE }}"
                - name: NFS_USER_ID
                  value: "{{ .Values.nfsUserID }}"
                - name: RETENTION
                  value: "{{ .Values.retention }}"
              command: ["/bin/sh"]
              # args: ["/opt/s3-files-backup-script/backup.sh"]
              args: ["-c","sleep 200000"]
              volumeMounts:
                - mountPath: /backup
                  name: backup
                - mountPath: /backup-target
                  name: backup-target
                - name: encrypt-key
                  mountPath: /etc/encrypt-key
                - mountPath: /opt/s3-files-backup-script
                  name: s3-files-backup-script
                  readOnly: true
          restartPolicy: OnFailure
          securityContext:
            runAsUser: 1001
          serviceAccountName: {{ include "s3-files-backup.serviceAccountName" . }}
          tolerations:
            - effect: NoSchedule
              operator: Exists
          volumes:
            - name: backup
              emptyDir: {}
            - name: backup-target
              persistentVolumeClaim:
                claimName: {{ .Values.targetPvcName }}
            - name: encrypt-key
              secret:
                secretName: {{.Values.deployEnv }}-s3-files-encrypt-key
            - name: s3-files-backup-script
              configMap:
                name: {{.Values.deployEnv }}-s3-files-backup-script
