def dockerRegistry = "ghcr.io"
def dockerRepo = "icgc-argo/python-kubespray"
def imageVersion = ""

pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  name: docker-build
spec:
  volumes:
  - name: dind-storage
    emptyDir: {}
  containers:
  - name: docker
    image: docker:19.03.14-git
    command:
    - cat
    tty: true
    env:
    - name: DOCKER_HOST
      value: tcp://localhost:2375
    - name: HOME
      value: /home/jenkins/agent
  - name: dind
    image: docker:19.03.14-dind
    securityContext:
      privileged: true
      runAsUser: 0
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ''
    args: ["--registry-mirror", "https://registry.dev.argo.cancercollaboratory.org"]
    volumeMounts:
      - name: dind-storage
        mountPath: /var/lib/docker
  securityContext:
    runAsUser: 1000
"""
    }
  }

  stages {
    stage('Build and publish docker image') {
      steps {
        container('docker') {
          withCredentials([usernamePassword(credentialsId:'argoContainers', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh "docker login ${dockerRegistry} -u $USERNAME -p $PASSWORD"
          }
          sh """
            cd docker/mongo
            docker build . -t ${dockerRegistry}/${dockerRepo}:latest
            imageVersion=`docker image inspect -f '{{ index .ContainerConfig.Labels "org.icgc-argo.mongo-backup.version" }}' ${dockerRegistry}/${dockerRepo}:latest`
            docker build . -t ${dockerRegistry}/${dockerRepo}:\$imageVersion
            docker push ${dockerRegistry}/${dockerRepo}:\$imageVersion
            docker push ${dockerRegistry}/${dockerRepo}:latest
          """
        }
      }
    }
  }
}
