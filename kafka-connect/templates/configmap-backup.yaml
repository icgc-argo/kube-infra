apiVersion: v1

kind: ConfigMap
metadata:
  name: {{ include "kafka-connect.fullname" . }}-backup
  labels:
    app.kubernetes.io/name: {{ include "kafka-connect.name" . }}
    helm.sh/chart: {{ include "kafka-connect.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  backup.sh: |-
    #!/bin/bash
    set -e
    data_path="{{ .Values.sinkPath }}"
    backup_dev="/mnt/backup"
    backup_dev_enc="/mnt/backup_enc"
    rsnap_config="/etc/backupConfig/rsnapshot.conf"

    if [[ ! -d $data_path ]]
      then
        echo "The path does not exist: $data_path"
        exit
    fi
    test -d $backup_dev || mkdir -p $backup_dev
    test -d $backup_dev_enc || mkdir -p $backup_dev_enc

    # Check if directory is not mounted
    if [[ -z $(mount | grep "$backup_dev type fuse.gocryptfs") ]]
      then
        if [[ ! -f $backup_dev_enc/gocryptfs.conf ]]
          then
          echo "Initialize encrypted volume..."
          gocryptfs -init -plaintextnames -passfile /etc/encrypt-key/password $backup_dev_enc
        fi
      echo "Mount encrypted FS"
      gocryptfs -nosyslog -q -passfile /etc/encrypt-key/password $backup_dev_enc $backup_dev
    fi


    # rsnapshot
    echo "Creating snapshot..."
    rsnapshot -c $rsnap_config alpha

    # cleanup
    fusermount -u $backup_dev

  rsnapshot.conf: |-
    config_version	1.2
    snapshot_root	/mnt/backup/{{ .Release.Name }}
    cmd_cp		/bin/cp
    cmd_rm		/bin/rm
    cmd_rsync	/usr/bin/rsync
    cmd_logger	/usr/bin/logger
    cmd_rsnapshot_diff	/usr/bin/rsnapshot-diff
    include	'*.sink'
    include	'*.gz'
    exclude	'*'
    retain	alpha	{{ .Values.backup.retention }}
    verbose		2
    loglevel	3
    lockfile	/var/run/backup/rsnapshot.pid
    rsync_short_args	-a
    rsync_long_args	--delete --numeric-ids --no-links --delete-excluded
    backup	{{ .Values.sinkPath }}		localhost/
